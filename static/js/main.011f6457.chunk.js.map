{"version":3,"sources":["components/ArticleResult/ArticleResult.js","components/NewsSearch/NewsSearch.js","components/TopNews/TopNews.js","components/App/App.js","serviceWorker.js","index.js"],"names":["ArticleResult","article","articleDate","Date","publishedAt","useState","hidden","setHidden","hideArticle","useCallback","Col","sm","md","className","Card","Img","variant","src","urlToImage","Body","Title","href","url","title","Text","description","Footer","toString","Button","onClick","NewsSearch","props","page","setPage","hasError","setErrors","newsResults","setNewsResults","nextPage","window","scrollTo","previousPage","query","a","fetch","headers","process","json","then","result","catch","err","useEffect","fetchAllNews","Container","fluid","Row","JSON","stringify","articles","CardDeck","map","index","key","Pagination","Prev","Item","disabled","Next","Spinner","animation","TopNews","country","setCountry","topNewsSort","setTopNewsSort","fetchTopNews","DropdownButton","size","Dropdown","eventKey","toUpperCase","sort","article1","article2","parse","App","setQuery","Navbar","expand","Brand","to","Toggle","aria-controls","Collapse","id","Nav","Form","inline","onSubmit","e","preventDefault","FormControl","type","placeholder","value","onChange","target","exact","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.011f6457.chunk.js","sourcesContent":["import React, { useCallback, useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nconst ArticleResult = ({ article }) => {\r\n  const articleDate = new Date(article.publishedAt);\r\n  const [hidden, setHidden] = useState(false);\r\n  const hideArticle = useCallback(() => {\r\n    setHidden(true);\r\n  }, []);\r\n\r\n  return (\r\n    <Col sm={12} md={3} className={\"mb-4 \" + (hidden ? \"d-none\" : \"\")}>\r\n      <Card className=\"h-100\">\r\n        <Card.Img variant=\"top\" src={article.urlToImage} />\r\n        <Card.Body>\r\n          <Card.Title>\r\n            <a href={article.url}>{article.title}</a>\r\n          </Card.Title>\r\n          <Card.Text className=\"text-body\">{article.description}</Card.Text>\r\n        </Card.Body>\r\n        <Card.Footer className=\"d-flex align-items-center justify-content-between\">\r\n          <small className=\"w-50 text-muted\">{articleDate.toString()}</small>\r\n          <Button variant=\"outline-secondary\" onClick={hideArticle}>\r\n            Hide Article\r\n          </Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default ArticleResult;\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport CardDeck from \"react-bootstrap/CardDeck\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Pagination from \"react-bootstrap/Pagination\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport ArticleResult from \"../ArticleResult/ArticleResult\";\r\n\r\nfunction NewsSearch(props) {\r\n  const [page, setPage] = useState(1);\r\n  const [hasError, setErrors] = useState(false);\r\n  const [newsResults, setNewsResults] = useState({});\r\n\r\n  const nextPage = useCallback(() => {\r\n    setPage(page + 1);\r\n    window.scrollTo(0, 0);\r\n  }, [page]);\r\n\r\n  const previousPage = useCallback(() => {\r\n    setPage(page - 1);\r\n    window.scrollTo(0, 0);\r\n  }, [page]);\r\n\r\n  async function fetchAllNews(query, page) {\r\n    const proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\r\n    const result = await fetch(\r\n      `${proxyUrl}https://newsapi.org/v2/everything?q=${query}&page=${page}`,\r\n      {\r\n        headers: {\r\n          \"X-Api-Key\": process.env.REACT_APP_NEWS_API_KEY,\r\n        },\r\n      }\r\n    );\r\n    result\r\n      .json()\r\n      .then((result) => {\r\n        setNewsResults(result);\r\n      })\r\n      .catch((err) => setErrors(err));\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (props.query) {\r\n      fetchAllNews(props.query, page);\r\n    }\r\n  }, [props.query, page]);\r\n\r\n  if (!newsResults && !hasError) {\r\n    return <Spinner animation=\"grow\" />;\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Row className=\"justify-content-center\">\r\n        {hasError ? (\r\n          <span>Error : {JSON.stringify(hasError)}</span>\r\n        ) : newsResults.articles ? (\r\n          <>\r\n            <h1 className=\"mb-3\">\r\n              Freshest news for your query : {props.query}\r\n            </h1>\r\n            <CardDeck>\r\n              {newsResults.articles.map((article, index) => (\r\n                <ArticleResult article={article} key={index} />\r\n              ))}\r\n            </CardDeck>\r\n            <Pagination>\r\n              {page > 1 && <Pagination.Prev onClick={previousPage} />}\r\n              <Pagination.Item disabled>Page {page}</Pagination.Item>\r\n              <Pagination.Next onClick={nextPage} />\r\n            </Pagination>\r\n          </>\r\n        ) : (\r\n          <h1>Use the search bar to find news !</h1>\r\n        )}\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default NewsSearch;\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport CardDeck from \"react-bootstrap/CardDeck\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport Pagination from \"react-bootstrap/Pagination\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport ArticleResult from \"../ArticleResult/ArticleResult\";\r\n\r\nfunction TopNews(props) {\r\n  // Countries are hard-coded.\r\n  // One way to programatically get those would be to use the News API /sources endpoint and parsing the result.abs\r\n  // But I'm lazy 😪\r\n  const countries = [\r\n    \"all\",\r\n    \"ae\",\r\n    \"ar\",\r\n    \"at\",\r\n    \"au\",\r\n    \"be\",\r\n    \"bg\",\r\n    \"br\",\r\n    \"ca\",\r\n    \"ch\",\r\n    \"cn\",\r\n    \"co\",\r\n    \"cu\",\r\n    \"cz\",\r\n    \"de\",\r\n    \"eg\",\r\n    \"fr\",\r\n    \"gb\",\r\n    \"gr\",\r\n    \"hk\",\r\n    \"hu\",\r\n    \"id\",\r\n    \"ie\",\r\n    \"il\",\r\n    \"in\",\r\n    \"it\",\r\n    \"jp\",\r\n    \"kr\",\r\n    \"lt\",\r\n    \"lv\",\r\n    \"ma\",\r\n    \"mx\",\r\n    \"my\",\r\n    \"ng\",\r\n    \"nl\",\r\n    \"no\",\r\n    \"nz\",\r\n    \"ph\",\r\n    \"pl\",\r\n    \"pt\",\r\n    \"ro\",\r\n    \"rs\",\r\n    \"ru\",\r\n    \"sa\",\r\n    \"se\",\r\n    \"sg\",\r\n    \"si\",\r\n    \"sk\",\r\n    \"th\",\r\n    \"tr\",\r\n    \"tw\",\r\n    \"ua\",\r\n    \"us\",\r\n    \"ve\",\r\n    \"za\",\r\n  ];\r\n\r\n  const [country, setCountry] = useState(\"us\");\r\n  const [page, setPage] = useState(1);\r\n  const [hasError, setErrors] = useState(false);\r\n  const [newsResults, setNewsResults] = useState({});\r\n  const [topNewsSort, setTopNewsSort] = useState(\"Latest\");\r\n\r\n  const nextPage = useCallback(() => {\r\n    setPage(page + 1);\r\n    window.scrollTo(0, 0);\r\n  }, [page]);\r\n\r\n  const previousPage = useCallback(() => {\r\n    setPage(page - 1);\r\n    window.scrollTo(0, 0);\r\n  }, [page]);\r\n\r\n  const isArticleEarlier = (article1, article2) => {\r\n    if (Date.parse(article1.publishedAt) < Date.parse(article2.publishedAt)) {\r\n      return -1;\r\n    }\r\n\r\n    if (Date.parse(article1.publishedAt) > Date.parse(article2.publishedAt)) {\r\n      return 1;\r\n    }\r\n\r\n    return 0;\r\n  };\r\n\r\n  const isArticleLater = (article1, article2) => {\r\n    if (Date.parse(article1.publishedAt) < Date.parse(article2.publishedAt)) {\r\n      return 1;\r\n    }\r\n\r\n    if (Date.parse(article1.publishedAt) > Date.parse(article2.publishedAt)) {\r\n      return -1;\r\n    }\r\n\r\n    return 0;\r\n  };\r\n\r\n  async function fetchTopNews(query, country, page) {\r\n    const proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\r\n    const result = await fetch(\r\n      `${proxyUrl}https://newsapi.org/v2/top-headlines?q=${query}&country=${country}&page=${page}`,\r\n      {\r\n        headers: {\r\n          \"X-Api-Key\": process.env.REACT_APP_NEWS_API_KEY,\r\n        },\r\n      }\r\n    );\r\n    result\r\n      .json()\r\n      .then((result) => setNewsResults(result))\r\n      .catch((err) => setErrors(err));\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchTopNews(props.query, country, page);\r\n  }, [props.query, country, page]);\r\n\r\n  if (!newsResults && !hasError) {\r\n    return <Spinner animation=\"grow\" />;\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Row className=\"justify-content-center\">\r\n        {hasError ? (\r\n          <span>Error : {JSON.stringify(hasError)}</span>\r\n        ) : (\r\n          newsResults.articles && (\r\n            <>\r\n              <h1 className=\"mb-3 d-flex\">\r\n                <DropdownButton\r\n                  size=\"lg\"\r\n                  variant=\"outline-light\"\r\n                  title={topNewsSort}\r\n                  className=\"d-flex mr-3\"\r\n                >\r\n                  <Dropdown.Item\r\n                    eventKey={\"Latest\"}\r\n                    onClick={() => setTopNewsSort(\"Latest\")}\r\n                  >\r\n                    Latest\r\n                  </Dropdown.Item>\r\n                  <Dropdown.Item\r\n                    eventKey={\"Earlier\"}\r\n                    onClick={() => setTopNewsSort(\"Earlier\")}\r\n                  >\r\n                    Earlier\r\n                  </Dropdown.Item>\r\n                </DropdownButton>\r\n                <span className=\"mr-3\">top news for </span>\r\n                {\r\n                  <DropdownButton\r\n                    variant=\"outline-light\"\r\n                    size=\"lg\"\r\n                    title={country.toUpperCase()}\r\n                    className=\"d-flex\"\r\n                  >\r\n                    {countries.map((country, index) => (\r\n                      <Dropdown.Item\r\n                        eventKey={index}\r\n                        key={index}\r\n                        onClick={() => setCountry(country)}\r\n                      >\r\n                        {country.toUpperCase()}\r\n                      </Dropdown.Item>\r\n                    ))}\r\n                  </DropdownButton>\r\n                }\r\n                {props.query && (\r\n                  <span className=\"ml-3\">and query : {props.query}</span>\r\n                )}\r\n              </h1>\r\n              <CardDeck>\r\n                {topNewsSort === \"Earlier\"\r\n                  ? newsResults.articles\r\n                      .sort(isArticleEarlier)\r\n                      .map((article, index) => (\r\n                        <ArticleResult article={article} key={index} />\r\n                      ))\r\n                  : newsResults.articles\r\n                      .sort(isArticleLater)\r\n                      .map((article, index) => (\r\n                        <ArticleResult article={article} key={index} />\r\n                      ))}\r\n              </CardDeck>\r\n              <Pagination>\r\n                {page > 1 && <Pagination.Prev onClick={previousPage} />}\r\n                <Pagination.Item disabled>Page {page}</Pagination.Item>\r\n                <Pagination.Next onClick={nextPage} />\r\n              </Pagination>\r\n            </>\r\n          )\r\n        )}\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TopNews;\r\n","import React, { useState } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport { HashRouter as Router, Link, Route, Switch } from \"react-router-dom\";\r\nimport NewsSearch from \"../NewsSearch/NewsSearch\";\r\nimport TopNews from \"../TopNews/TopNews\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Navbar expand=\"md\" className=\"justify-content-between\">\r\n          <Navbar.Brand>\r\n            <Link\r\n              to={process.env.PUBLIC_URL + \"/\"}\r\n              className=\"text-decoration-none text-light\"\r\n            >\r\n              News search\r\n            </Link>\r\n          </Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"navbar-navigation\" />\r\n          <Navbar.Collapse id=\"navbar-navigation\">\r\n            <Nav className=\"mr-auto\">\r\n              <Link\r\n                to={process.env.PUBLIC_URL + \"/top-news\"}\r\n                className=\"text-light\"\r\n              >\r\n                Top news\r\n              </Link>\r\n            </Nav>\r\n            <Form\r\n              inline\r\n              onSubmit={e => {\r\n                e.preventDefault();\r\n              }}\r\n            >\r\n              <FormControl\r\n                type=\"text\"\r\n                className=\"w-100\"\r\n                placeholder=\"Search here...\"\r\n                value={query}\r\n                onChange={e => setQuery(e.target.value)}\r\n              />\r\n            </Form>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n        <Switch>\r\n          <Route exact path={process.env.PUBLIC_URL + \"/\"}>\r\n            <NewsSearch query={query} />\r\n          </Route>\r\n          <Route path={process.env.PUBLIC_URL + \"/top-news\"}>\r\n            <TopNews query={query} />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App/App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
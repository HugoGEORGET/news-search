{"version":3,"sources":["components/ArticleResult/ArticleResult.js","components/NewsSearch/NewsSearch.js","components/TopNews/TopNews.js","components/App/App.js","serviceWorker.js","index.js"],"names":["ArticleResult","article","articleDate","Date","publishedAt","useState","hidden","setHidden","hideArticle","useCallback","Col","sm","md","className","Card","Img","variant","src","urlToImage","Body","Title","href","url","title","Text","description","Footer","toString","Button","onClick","NewsSearch","props","page","setPage","hasError","setErrors","newsResults","setNewsResults","nextPage","window","scrollTo","previousPage","useEffect","query","a","async","fetch","json","then","result","catch","err","fetchAllNews","Container","fluid","Row","JSON","stringify","articles","CardDeck","map","index","key","Pagination","Prev","Item","disabled","Next","Spinner","animation","TopNews","country","setCountry","topNewsSort","setTopNewsSort","fetchTopNews","DropdownButton","size","Dropdown","eventKey","toUpperCase","sort","article1","article2","parse","App","setQuery","Navbar","expand","Brand","to","process","Toggle","aria-controls","Collapse","id","Nav","Form","inline","onSubmit","e","preventDefault","FormControl","type","placeholder","value","onChange","target","exact","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.939a8de8.chunk.js","sourcesContent":["import React, { useCallback, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\n\nconst ArticleResult = ({ article }) => {\n  const articleDate = new Date(article.publishedAt);\n  const [hidden, setHidden] = useState(false);\n  const hideArticle = useCallback(() => {\n    setHidden(true);\n  }, []);\n\n  return (\n    <Col sm={12} md={3} className={\"mb-4 \" + (hidden ? \"d-none\" : \"\")}>\n      <Card className=\"h-100\">\n        <Card.Img variant=\"top\" src={article.urlToImage} />\n        <Card.Body>\n          <Card.Title>\n            <a href={article.url}>{article.title}</a>\n          </Card.Title>\n          <Card.Text className=\"text-body\">{article.description}</Card.Text>\n        </Card.Body>\n        <Card.Footer className=\"d-flex align-items-center justify-content-between\">\n          <small className=\"w-50 text-muted\">{articleDate.toString()}</small>\n          <Button variant=\"outline-secondary\" onClick={hideArticle}>\n            Hide Article\n          </Button>\n        </Card.Footer>\n      </Card>\n    </Col>\n  );\n};\n\nexport default ArticleResult;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport CardDeck from \"react-bootstrap/CardDeck\";\nimport Container from \"react-bootstrap/Container\";\nimport Pagination from \"react-bootstrap/Pagination\";\nimport Row from \"react-bootstrap/Row\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport ArticleResult from \"../ArticleResult/ArticleResult\";\n\nfunction NewsSearch(props) {\n  const [page, setPage] = useState(1);\n  const [hasError, setErrors] = useState(false);\n  const [newsResults, setNewsResults] = useState({});\n\n  const nextPage = useCallback(() => {\n    setPage(page + 1);\n    window.scrollTo(0, 0);\n  }, [page]);\n\n  const previousPage = useCallback(() => {\n    setPage(page - 1);\n    window.scrollTo(0, 0);\n  }, [page]);\n\n  async function fetchAllNews(query, page) {\n    const result = await fetch(\n      \"https://newsapi.org/v2/everything?q=\" +\n        query +\n        \"&page=\" +\n        page +\n        \"&apiKey=803fdd9b8517490d89d8c85ade466b8d\"\n    );\n    result\n      .json()\n      .then(result => {\n        setNewsResults(result);\n      })\n      .catch(err => setErrors(err));\n  }\n\n  useEffect(() => {\n    fetchAllNews(props.query, page);\n  }, [props.query, page]);\n\n  if (!newsResults && !hasError) {\n    return <Spinner animation=\"grow\" />;\n  }\n\n  return (\n    <Container fluid>\n      <Row className=\"justify-content-center\">\n        {hasError ? (\n          <span>Error : {JSON.stringify(hasError)}</span>\n        ) : (\n          newsResults.articles && (\n            <>\n              <h1 className=\"mb-3\">\n                Freshest news for your query : {props.query}\n              </h1>\n              <CardDeck>\n                {newsResults.articles.map((article, index) => (\n                  <ArticleResult article={article} key={index} />\n                ))}\n              </CardDeck>\n              <Pagination>\n                {page > 1 && <Pagination.Prev onClick={previousPage} />}\n                <Pagination.Item disabled>Page {page}</Pagination.Item>\n                <Pagination.Next onClick={nextPage} />\n              </Pagination>\n            </>\n          )\n        )}\n      </Row>\n    </Container>\n  );\n}\n\nexport default NewsSearch;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport CardDeck from \"react-bootstrap/CardDeck\";\nimport Container from \"react-bootstrap/Container\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Pagination from \"react-bootstrap/Pagination\";\nimport Row from \"react-bootstrap/Row\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport ArticleResult from \"../ArticleResult/ArticleResult\";\n\nfunction TopNews(props) {\n  // Countries are hard-coded.\n  // One way to programatically get those would be to use the News API /sources endpoint and parsing the result.abs\n  // But I'm lazy 😪\n  const countries = [\n    \"all\",\n    \"ae\",\n    \"ar\",\n    \"at\",\n    \"au\",\n    \"be\",\n    \"bg\",\n    \"br\",\n    \"ca\",\n    \"ch\",\n    \"cn\",\n    \"co\",\n    \"cu\",\n    \"cz\",\n    \"de\",\n    \"eg\",\n    \"fr\",\n    \"gb\",\n    \"gr\",\n    \"hk\",\n    \"hu\",\n    \"id\",\n    \"ie\",\n    \"il\",\n    \"in\",\n    \"it\",\n    \"jp\",\n    \"kr\",\n    \"lt\",\n    \"lv\",\n    \"ma\",\n    \"mx\",\n    \"my\",\n    \"ng\",\n    \"nl\",\n    \"no\",\n    \"nz\",\n    \"ph\",\n    \"pl\",\n    \"pt\",\n    \"ro\",\n    \"rs\",\n    \"ru\",\n    \"sa\",\n    \"se\",\n    \"sg\",\n    \"si\",\n    \"sk\",\n    \"th\",\n    \"tr\",\n    \"tw\",\n    \"ua\",\n    \"us\",\n    \"ve\",\n    \"za\"\n  ];\n\n  const [country, setCountry] = useState(\"us\");\n  const [page, setPage] = useState(1);\n  const [hasError, setErrors] = useState(false);\n  const [newsResults, setNewsResults] = useState({});\n  const [topNewsSort, setTopNewsSort] = useState(\"Latest\");\n\n  const nextPage = useCallback(() => {\n    setPage(page + 1);\n    window.scrollTo(0, 0);\n  }, [page]);\n\n  const previousPage = useCallback(() => {\n    setPage(page - 1);\n    window.scrollTo(0, 0);\n  }, [page]);\n\n  const isArticleEarlier = (article1, article2) => {\n    if (Date.parse(article1.publishedAt) < Date.parse(article2.publishedAt)) {\n      return -1;\n    }\n\n    if (Date.parse(article1.publishedAt) > Date.parse(article2.publishedAt)) {\n      return 1;\n    }\n\n    return 0;\n  };\n\n  const isArticleLater = (article1, article2) => {\n    if (Date.parse(article1.publishedAt) < Date.parse(article2.publishedAt)) {\n      return 1;\n    }\n\n    if (Date.parse(article1.publishedAt) > Date.parse(article2.publishedAt)) {\n      return -1;\n    }\n\n    return 0;\n  };\n\n  async function fetchTopNews(query, country, page) {\n    const result = await fetch(\n      \"https://newsapi.org/v2/top-headlines?q=\" +\n        query +\n        \"&country=\" +\n        country +\n        \"&page=\" +\n        page +\n        \"&apiKey=803fdd9b8517490d89d8c85ade466b8d\"\n    );\n    result\n      .json()\n      .then(result => setNewsResults(result))\n      .catch(err => setErrors(err));\n  }\n\n  useEffect(() => {\n    fetchTopNews(props.query, country, page);\n  }, [props.query, country, page]);\n\n  if (!newsResults && !hasError) {\n    return <Spinner animation=\"grow\" />;\n  }\n\n  return (\n    <Container fluid>\n      <Row className=\"justify-content-center\">\n        {hasError ? (\n          <span>Error : {JSON.stringify(hasError)}</span>\n        ) : (\n          newsResults.articles && (\n            <>\n              <h1 className=\"mb-3 d-flex\">\n                <DropdownButton\n                  size=\"lg\"\n                  variant=\"outline-light\"\n                  title={topNewsSort}\n                  className=\"d-flex mr-3\"\n                >\n                  <Dropdown.Item\n                    eventKey={\"Latest\"}\n                    onClick={() => setTopNewsSort(\"Latest\")}\n                  >\n                    Latest\n                  </Dropdown.Item>\n                  <Dropdown.Item\n                    eventKey={\"Earlier\"}\n                    onClick={() => setTopNewsSort(\"Earlier\")}\n                  >\n                    Earlier\n                  </Dropdown.Item>\n                </DropdownButton>\n                <span className=\"mr-3\">top news for </span>\n                {\n                  <DropdownButton\n                    variant=\"outline-light\"\n                    size=\"lg\"\n                    title={country.toUpperCase()}\n                    className=\"d-flex\"\n                  >\n                    {countries.map((country, index) => (\n                      <Dropdown.Item\n                        eventKey={index}\n                        key={index}\n                        onClick={() => setCountry(country)}\n                      >\n                        {country.toUpperCase()}\n                      </Dropdown.Item>\n                    ))}\n                  </DropdownButton>\n                }\n                {props.query && (\n                  <span className=\"ml-3\">and query : {props.query}</span>\n                )}\n              </h1>\n              <CardDeck>\n                {topNewsSort === \"Earlier\"\n                  ? newsResults.articles\n                      .sort(isArticleEarlier)\n                      .map((article, index) => (\n                        <ArticleResult article={article} key={index} />\n                      ))\n                  : newsResults.articles\n                      .sort(isArticleLater)\n                      .map((article, index) => (\n                        <ArticleResult article={article} key={index} />\n                      ))}\n              </CardDeck>\n              <Pagination>\n                {page > 1 && <Pagination.Prev onClick={previousPage} />}\n                <Pagination.Item disabled>Page {page}</Pagination.Item>\n                <Pagination.Next onClick={nextPage} />\n              </Pagination>\n            </>\n          )\n        )}\n      </Row>\n    </Container>\n  );\n}\n\nexport default TopNews;\n","import React, { useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport { HashRouter as Router, Link, Route, Switch } from \"react-router-dom\";\nimport NewsSearch from \"../NewsSearch/NewsSearch\";\nimport TopNews from \"../TopNews/TopNews\";\nimport \"./App.css\";\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar expand=\"md\" className=\"justify-content-between\">\n          <Navbar.Brand>\n            <Link\n              to={process.env.PUBLIC_URL + \"/\"}\n              className=\"text-decoration-none text-light\"\n            >\n              News search\n            </Link>\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"navbar-navigation\" />\n          <Navbar.Collapse id=\"navbar-navigation\">\n            <Nav className=\"mr-auto\">\n              <Link\n                to={process.env.PUBLIC_URL + \"/top-news\"}\n                className=\"text-light\"\n              >\n                Top news\n              </Link>\n            </Nav>\n            <Form\n              inline\n              onSubmit={e => {\n                e.preventDefault();\n              }}\n            >\n              <FormControl\n                type=\"text\"\n                className=\"w-100\"\n                placeholder=\"Search here...\"\n                value={query}\n                onChange={e => setQuery(e.target.value)}\n              />\n            </Form>\n          </Navbar.Collapse>\n        </Navbar>\n        <Switch>\n          <Route exact path={process.env.PUBLIC_URL + \"/\"}>\n            <NewsSearch query={query} />\n          </Route>\n          <Route path={process.env.PUBLIC_URL + \"/top-news\"}>\n            <TopNews query={query} />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
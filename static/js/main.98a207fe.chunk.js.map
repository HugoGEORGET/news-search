{"version":3,"sources":["components/ArticleResult/ArticleResult.js","components/App/App.js","serviceWorker.js","index.js"],"names":["ArticleResult","article","articleDate","Date","publishedAt","Col","sm","md","Card","className","Img","variant","src","urlToImage","Body","Title","href","url","title","Text","description","Footer","toDateString","App","useState","query","setQuery","hasError","setErrors","newsResults","setNewsResults","useEffect","a","fetch","json","then","result","catch","err","fetchNews","Navbar","Brand","Form","inline","FormControl","type","placeholder","value","onChange","e","target","Container","fluid","Row","JSON","stringify","articles","CardDeck","map","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+UAgCeA,EA5BO,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjBC,EAAc,IAAIC,KAAKF,EAAQG,aAErC,OACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,kBAACC,EAAA,EAAD,CAAMC,UAAU,SACd,kBAACD,EAAA,EAAKE,IAAN,CAAUC,QAAQ,MAAMC,IAAKX,EAAQY,aACrC,kBAACL,EAAA,EAAKM,KAAN,KACE,kBAACN,EAAA,EAAKO,MAAN,KACE,uBAAGC,KAAMf,EAAQgB,KAAMhB,EAAQiB,QAEjC,kBAACV,EAAA,EAAKW,KAAN,CAAWV,UAAU,aAAaR,EAAQmB,cAE5C,kBAACZ,EAAA,EAAKa,OAAN,KACE,2BAAOZ,UAAU,cAAcP,EAAYoB,oB,MC4CtCC,MApDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,oBAAS,GAF1B,mBAENG,EAFM,KAEIC,EAFJ,OAGyBJ,mBAAS,IAHlC,mBAGNK,EAHM,KAGOC,EAHP,KAoBb,OAfAC,qBAAU,WAAM,4CACd,sBAAAC,EAAA,sEACuBC,MACnB,uCACER,EACA,8DAJN,cAOKS,OACAC,MAAK,SAAAC,GAAM,OAAIN,EAAeM,MAC9BC,OAAM,SAAAC,GAAG,OAAIV,EAAUU,MAT5B,4CADc,uBAAC,WAAD,wBAYdC,KACC,CAACd,IAGF,yBAAKhB,UAAU,OACb,kBAAC+B,EAAA,EAAD,CAAQ/B,UAAU,2BAChB,kBAAC+B,EAAA,EAAOC,MAAR,CAAchC,UAAU,cAAxB,eACA,kBAACiC,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,CACEC,KAAK,OACLC,YAAY,iBACZC,MAAOtB,EACPuB,SAAU,SAAAC,GAAC,OAAIvB,EAASuB,EAAEC,OAAOH,YAIvC,kBAACI,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACC,EAAA,EAAD,KACG1B,EACC,yCAAe2B,KAAKC,UAAU5B,IAE9BE,EAAY2B,UACV,kBAACC,EAAA,EAAD,KACG5B,EAAY2B,SAASE,KAAI,SAAAzD,GAAO,OAC/B,kBAAC,EAAD,CAAeA,QAASA,Y,MCvCtB0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,kB","file":"static/js/main.98a207fe.chunk.js","sourcesContent":["import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\n\nconst ArticleResult = ({ article }) => {\n  const articleDate = new Date(article.publishedAt);\n\n  return (\n    <Col sm={12} md={4}>\n      <Card className=\"h-100\">\n        <Card.Img variant=\"top\" src={article.urlToImage} />\n        <Card.Body>\n          <Card.Title>\n            <a href={article.url}>{article.title}</a>\n          </Card.Title>\n          <Card.Text className=\"text-body\">{article.description}</Card.Text>\n        </Card.Body>\n        <Card.Footer>\n          <small className=\"text-muted\">{articleDate.toDateString()}</small>\n        </Card.Footer>\n      </Card>\n    </Col>\n    /* <article className=\"news-article\">\n      <img src={article.urlToImage} alt=\"Article illustration\"></img>\n      <a href={article.url}>\n        <h2>{article.title}</h2>\n      </a>\n      <p>{article.description}</p>\n    </article> */\n  );\n};\n\nexport default ArticleResult;\n","import React, { useEffect, useState } from \"react\";\nimport CardDeck from \"react-bootstrap/CardDeck\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport ArticleResult from \"../ArticleResult/ArticleResult\";\nimport \"./App.css\";\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [hasError, setErrors] = useState(false);\n  const [newsResults, setNewsResults] = useState({});\n\n  useEffect(() => {\n    async function fetchNews() {\n      const result = await fetch(\n        \"https://newsapi.org/v2/everything?q=\" +\n          query +\n          \"&sortBy=popularity&apiKey=803fdd9b8517490d89d8c85ade466b8d\"\n      );\n      result\n        .json()\n        .then(result => setNewsResults(result))\n        .catch(err => setErrors(err));\n    }\n    fetchNews();\n  }, [query]);\n\n  return (\n    <div className=\"App\">\n      <Navbar className=\"justify-content-between\">\n        <Navbar.Brand className=\"text-light\">News search</Navbar.Brand>\n        <Form inline>\n          <FormControl\n            type=\"text\"\n            placeholder=\"Search here...\"\n            value={query}\n            onChange={e => setQuery(e.target.value)}\n          />\n        </Form>\n      </Navbar>\n      <Container fluid>\n        <Row>\n          {hasError ? (\n            <span>Error : {JSON.stringify(hasError)}</span>\n          ) : (\n            newsResults.articles && (\n              <CardDeck>\n                {newsResults.articles.map(article => (\n                  <ArticleResult article={article} />\n                ))}\n              </CardDeck>\n            )\n          )}\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/ArticleResult/ArticleResult.js","components/NewsSearch/NewsSearch.js","components/TopNews/TopNews.js","components/App/App.js","serviceWorker.js","index.js"],"names":["ArticleResult","article","articleDate","Date","publishedAt","useState","hidden","setHidden","hideArticle","useCallback","Col","sm","md","className","Card","Img","variant","src","urlToImage","Body","Title","href","url","title","Text","description","Footer","toDateString","Button","onClick","NewsSearch","props","hasError","setErrors","newsResults","setNewsResults","query","a","fetch","json","then","result","catch","err","useEffect","fetchEverything","Container","fluid","Row","JSON","stringify","articles","CardDeck","map","index","key","TopNews","country","fetchTopNews","App","setQuery","Navbar","Brand","Toggle","aria-controls","Collapse","id","Nav","Link","to","Form","inline","FormControl","type","placeholder","value","onChange","e","target","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fb07c7d0.chunk.js","sourcesContent":["import React, { useCallback, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\n\nconst ArticleResult = ({ article }) => {\n  const articleDate = new Date(article.publishedAt);\n  const [hidden, setHidden] = useState(false);\n  const hideArticle = useCallback(() => {\n    setHidden(true);\n  }, []);\n\n  return (\n    <Col sm={12} md={4} className={\"mb-4 \" + (hidden ? \"d-none\" : \"\")}>\n      <Card className=\"h-100\">\n        <Card.Img variant=\"top\" src={article.urlToImage} />\n        <Card.Body>\n          <Card.Title>\n            <a href={article.url}>{article.title}</a>\n          </Card.Title>\n          <Card.Text className=\"text-body\">{article.description}</Card.Text>\n        </Card.Body>\n        <Card.Footer className=\"d-flex align-items-center justify-content-between\">\n          <small className=\"text-muted\">{articleDate.toDateString()}</small>\n          <Button variant=\"outline-secondary\" onClick={hideArticle}>\n            Hide Article\n          </Button>\n        </Card.Footer>\n      </Card>\n    </Col>\n  );\n};\n\nexport default ArticleResult;\n","import React, { useEffect, useState } from \"react\";\nimport CardDeck from \"react-bootstrap/CardDeck\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport ArticleResult from \"../ArticleResult/ArticleResult\";\n\nfunction NewsSearch(props) {\n  const [hasError, setErrors] = useState(false);\n  const [newsResults, setNewsResults] = useState({});\n\n  async function fetchEverything(query) {\n    const result = await fetch(\n      \"https://newsapi.org/v2/everything?q=\" +\n        query +\n        \"&sortBy=popularity&apiKey=803fdd9b8517490d89d8c85ade466b8d\"\n    );\n    result\n      .json()\n      .then(result => setNewsResults(result))\n      .catch(err => setErrors(err));\n  }\n\n  useEffect(() => {\n    fetchEverything(props.query);\n  }, [props.query]);\n\n  return (\n    <Container fluid>\n      <Row>\n        {hasError ? (\n          <span>Error : {JSON.stringify(hasError)}</span>\n        ) : (\n          newsResults.articles && (\n            <CardDeck>\n              {newsResults.articles.map((article, index) => (\n                <ArticleResult article={article} key={index} />\n              ))}\n            </CardDeck>\n          )\n        )}\n      </Row>\n    </Container>\n  );\n}\n\nexport default NewsSearch;\n","import React, { useEffect, useState } from \"react\";\nimport CardDeck from \"react-bootstrap/CardDeck\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport ArticleResult from \"../ArticleResult/ArticleResult\";\n\nfunction TopNews(props) {\n  const [country, setCountry] = useState(\"us\");\n  const [hasError, setErrors] = useState(false);\n  const [newsResults, setNewsResults] = useState({});\n\n  async function fetchTopNews(query, country) {\n    const result = await fetch(\n      \"https://newsapi.org/v2/top-headlines?q=\" +\n        query +\n        \"&country=\" +\n        country +\n        \"&apiKey=803fdd9b8517490d89d8c85ade466b8d\"\n    );\n    result\n      .json()\n      .then(result => setNewsResults(result))\n      .catch(err => setErrors(err));\n  }\n\n  useEffect(() => {\n    fetchTopNews(props.query, country);\n  }, [props.query, country]);\n\n  return (\n    <Container fluid>\n      <Row>\n        {hasError ? (\n          <span>Error : {JSON.stringify(hasError)}</span>\n        ) : (\n          newsResults.articles && (\n            <CardDeck>\n              {newsResults.articles.map((article, index) => (\n                <ArticleResult article={article} key={index} />\n              ))}\n            </CardDeck>\n          )\n        )}\n      </Row>\n    </Container>\n  );\n}\n\nexport default TopNews;\n","import React, { useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\nimport NewsSearch from \"../NewsSearch/NewsSearch\";\nimport TopNews from \"../TopNews/TopNews\";\nimport \"./App.css\";\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar className=\"justify-content-between\">\n          <Navbar.Brand className=\"text-light\">News search</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"navbar-navigation\" />\n          <Navbar.Collapse id=\"navbar-navigation\">\n            <Nav>\n              <Nav.Link>\n                <Link to=\"/\">Home</Link>\n              </Nav.Link>\n              <Nav.Link>\n                <Link to=\"/top-news\">Top news</Link>\n              </Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n          <Form inline className=\"w-25\">\n            <FormControl\n              type=\"text\"\n              className=\"w-100\"\n              placeholder=\"Search here...\"\n              value={query}\n              onChange={e => setQuery(e.target.value)}\n            />\n          </Form>\n        </Navbar>\n        <Switch>\n          <Route exact path=\"/\">\n            <NewsSearch query={query} />\n          </Route>\n          <Route path=\"/top-news\">\n            <TopNews query={query} />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}